package com.example.Personality.Services;

import com.example.Personality.Responses.AnswerReviewResponse;
import com.theokanning.openai.completion.chat.ChatCompletionRequest;
import com.theokanning.openai.completion.chat.ChatCompletionResult;
import com.theokanning.openai.completion.chat.ChatMessage;
import com.theokanning.openai.service.OpenAiService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;

@Service
public class OpenAIService {
    @Value("${openai.api.key}")
    private String apiKey;

    public String analyzePersonality(List<AnswerReviewResponse> answers) {
        String prompt = convertJsonToPrompt(answers);

        OpenAiService service = new OpenAiService(apiKey);

        ChatCompletionRequest request = ChatCompletionRequest.builder()
                .model("gpt-3.5-turbo")
                .messages(List.of(
                        new ChatMessage("system", "B·∫°n l√† chuy√™n gia t∆∞ v·∫•n h∆∞·ªõng nghi·ªáp v√† ph√¢n t√≠ch t√¢m l√Ω."),
                        new ChatMessage("user", prompt)
                ))
                .temperature(0.7)
                .maxTokens(600) // TƒÉng n·∫øu c·∫ßn k·∫øt qu·∫£ chi ti·∫øt
                .topP(1.0)
                .n(1)
                .build();

        ChatCompletionResult result = service.createChatCompletion(request);
        return result.getChoices().get(0).getMessage().getContent().trim();
    }

    public String convertJsonToPrompt(List<AnswerReviewResponse> responses) {
        StringBuilder prompt = new StringBuilder();

        prompt.append("B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n t√¢m l√Ω v√† h∆∞·ªõng nghi·ªáp.\n");
        prompt.append("T√¥i c√≥ k·∫øt qu·∫£ b√†i tr·∫Øc nghi·ªám t√≠nh c√°ch t·ª´ m·ªôt ng∆∞·ªùi d√πng.\n");
        prompt.append("M·ªói c√¢u h·ªèi ƒëo m·ªôt kh√≠a c·∫°nh h√†nh vi, ng∆∞·ªùi d√πng ch·ªçn m·ª©c ƒë·ªô ƒë·ªìng √Ω t·ª´ 1 ƒë·∫øn 5:\n");
        prompt.append("- 1: R·∫•t kh√¥ng ƒë·ªìng √Ω\n");
        prompt.append("- 2: Kh√¥ng ƒë·ªìng √Ω\n");
        prompt.append("- 3: Trung l·∫≠p\n");
        prompt.append("- 4: ƒê·ªìng √Ω\n");
        prompt.append("- 5: R·∫•t ƒë·ªìng √Ω\n\n");

        prompt.append("D∆∞·ªõi ƒë√¢y l√† c√¢u h·ªèi c√πng ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi d√πng:\n\n");

        int i = 1;
        for (AnswerReviewResponse review : responses) {
            prompt.append(i++)
                    .append(". \"")
                    .append(review.getQuestionContent())
                    .append("\" ‚Üí ")
                    .append(review.getSelectedRating())
                    .append("\n");
        }

        prompt.append("\nüß† H√£y ph√¢n t√≠ch d·ª±a tr√™n t·ª´ng c√¢u tr·∫£ l·ªùi v√† t·ªïng th·ªÉ ƒëi·ªÉm s·ªë.\n");
        prompt.append("‚úçÔ∏è Tr·∫£ v·ªÅ k·∫øt qu·∫£ theo ƒê√öNG ƒë·ªãnh d·∫°ng sau:\n");
        prompt.append("T√≠nh c√°ch: (vi·∫øt m·ªôt ƒëo·∫°n m√¥ t·∫£ t√¢m l√Ω kho·∫£ng 100 t·ª´)\n");
        prompt.append("Ng√†nh ngh·ªÅ ph√π h·ª£p: (li·ªát k√™ 2‚Äì4 ng√†nh ngh·ªÅ ph√π h·ª£p nh·∫•t, c√°ch nhau b·ªüi d·∫•u ph·∫©y)\n");
        prompt.append("\nNg√¥n ng·ªØ tr·∫£ l·ªùi: Ti·∫øng Vi·ªát.\n");

        return prompt.toString();
    }
}
