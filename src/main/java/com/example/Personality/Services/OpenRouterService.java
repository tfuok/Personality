package com.example.Personality.Services;

import com.example.Personality.Responses.AnswerReviewResponse;
import okhttp3.*;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
public class OpenRouterService {

    @Value("${openrouter.api.key}")
    private String apiKey;

    private final OkHttpClient client = new OkHttpClient();

    public String analyzePersonality(List<AnswerReviewResponse> answers) {
        try {
            String prompt = buildPrompt(answers);

            JSONObject payload = new JSONObject();
            payload.put("model", "mistralai/mistral-7b-instruct");

            JSONArray messages = new JSONArray();
            messages.put(new JSONObject().put("role", "system").put("content", "B·∫°n l√† chuy√™n gia t∆∞ v·∫•n t√¢m l√Ω v√† h∆∞·ªõng nghi·ªáp."));
            messages.put(new JSONObject().put("role", "user").put("content", prompt));
            payload.put("messages", messages);

            Request request = new Request.Builder()
                    .url("https://openrouter.ai/api/v1/chat/completions")
                    .post(RequestBody.create(payload.toString(), MediaType.parse("application/json")))
                    .addHeader("Authorization", "Bearer " + apiKey)
                    .addHeader("HTTP-Referer", "https://github.com/tfuok/Personality")
                    .addHeader("X-Title", "PersonalityAI")
                    .build();

            try (Response response = client.newCall(request).execute()) {
                String responseBodyStr = response.body() != null ? response.body().string() : "null";

                if (!response.isSuccessful()) {
                    System.out.println("==== OpenRouter Error ====");
                    System.out.println("Status: " + response.code());
                    System.out.println("Body: " + responseBodyStr);
                    return "L·ªói t·ª´ OpenRouter:\n" +
                            "Status: " + response.code() + "\n" +
                            "Body: " + responseBodyStr;
                }

                JSONObject responseJson = new JSONObject(responseBodyStr);
                String content = responseJson
                        .getJSONArray("choices")
                        .getJSONObject(0)
                        .getJSONObject("message")
                        .getString("content")
                        .trim();

                // N·∫øu content l√† JSON h·ª£p l·ªá, parse v√† format l·∫°i
                if (content.startsWith("{")) {
                    try {
                        JSONObject resultJson = new JSONObject(content);
                        String description = resultJson.getString("description");
                        JSONArray careersArray = resultJson.getJSONArray("careers");
                        List<String> careers = new ArrayList<>();
                        for (int i = 0; i < careersArray.length(); i++) {
                            careers.add(careersArray.getString(i));
                        }
                        return description + "\n\nNg√†nh ngh·ªÅ ph√π h·ª£p:\n- " + String.join("\n- ", careers);
                    } catch (Exception e) {
                        // N·∫øu JSON l·ªói, tr·∫£ v·ªÅ content g·ªëc
                        return content;
                    }
                } else {
                    // N·∫øu kh√¥ng ph·∫£i JSON, tr·∫£ v·ªÅ ƒëo·∫°n vƒÉn g·ªëc
                    return content;
                }
            }
        } catch (Exception e) {
            return "L·ªói h·ªá th·ªëng AI: " + e.getMessage();
        }
    }

    private String buildPrompt(List<AnswerReviewResponse> reviews) {
        StringBuilder sb = new StringBuilder();
        sb.append("B·∫°n l√† m·ªôt chuy√™n gia h∆∞·ªõng nghi·ªáp.\n");
        sb.append("D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√¢u h·ªèi v√† m·ª©c ƒëi·ªÉm ng∆∞·ªùi d√πng ch·ªçn (1 ƒë·∫øn 5):\n");

        int i = 1;
        for (AnswerReviewResponse r : reviews) {
            sb.append(i++)
                    .append(". \"").append(r.getQuestionContent()).append("\" ‚Üí ")
                    .append(r.getSelectedRating()).append("\n");
        }

        sb.append("\nüëâ D·ª±a v√†o k·∫øt qu·∫£ tr√™n, h√£y tr·∫£ l·∫°i ph·∫£n h·ªìi JSON ƒë√∫ng ƒë·ªãnh d·∫°ng:\n\n");
        sb.append("{\n");
        sb.append("  \"description\": \"... (t·ªëi ƒëa 100 t·ª´ v√† b·∫±ng ti·∫øng Vi·ªát)\",\n");
        sb.append("  \"careers\": [\"Ng√†nh 1\", \"Ng√†nh 2\", \"Ng√†nh 3\"]\n");
        sb.append("}\n");

        sb.append("Ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá theo ƒë√∫ng format tr√™n, kh√¥ng th√™m gi·∫£i th√≠ch.");

        return sb.toString();
    }
}